




def MetadataObjectForURL(url):

    from BeautifulSoup import BeautifulSoup
    from urllib import urlencode
    from urllib2 import urlopen

    param = get_url_part(url, 'sRef')
    web_port = get_url_part(url, 'web_port')
    url = get_url_part(url)
    try:
        data = urlencode({'sRef': param})
        response = urlopen('http://{}:{}/web/epgservicenow'.format(url, web_port), data)
        res = response.read()
        soup = BeautifulSoup(res)
        elem = soup.find('e2event')
        id, start, duration, current_time, title, description, sRef, name = elem.findAll(['e2eventid',
                                                                            'e2eventstart',
                                                                            'e2eventduration',
                                                                            'e2eventcurrenttime',
                                                                            'e2eventtitle',
                                                                            'e2eventdescription',
                                                                            'e2eventservicereference',
                                                                            'e2eventservicename'])
    except Exception as e:
        return e

    return VideoClipObject(
        title=title.string,
        summary=description.string,
        thumb='thumb')


def MediaObjectsForURL(url):
    #TODO Get a few packets and get the stream info etc. Media values go in here
    return [
        MediaObject(
            video_codec = 'h264',
            audio_codec = 'mp3',
            container = 'mpegts',
            parts = [PartObject(key=Callback(PlayVideoIndirect, url = url))]
        )
    ]



# Called when the user presses the play button.
# Callback function called from the part object
@indirect
def PlayVideoIndirect(url):

    param = get_url_part(url, 'sRef')
    video_port = get_url_part(url, 'video_port')
    url = get_url_part(url)

    oc = ObjectContainer(objects=[
            VideoClipObject(items=[
                            MediaObject(
                                video_codec = 'h264',
                                audio_codec = 'mp3',
                                container = 'mpegts',
                                 parts=[PartObject(key='http://{}:{}/{}'.format(url, video_port, param))])
                            ])
    ])
    return oc


#######################################
# Helpers                             #
#######################################




def get_url_part(url, type='url'):
    from urlparse import urlparse

    query = urlparse(url)
    data = query.path.split('/')
    if type== 'sRef':
        return data[3]
    elif type == 'web_port':
        return data[1]
    elif type== 'video_port':
        return data[2]
    else:
        return query.netloc





